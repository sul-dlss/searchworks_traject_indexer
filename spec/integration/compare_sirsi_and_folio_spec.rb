require 'spec_helper'

describe 'comparing against a well-known location full of documents generated by solrmarc' do
  skip unless ENV['OKAPI_URL']

  let(:folio_indexer) do
    Traject::Indexer.new.tap do |i|
      i.load_config_file('./lib/traject/config/folio_config.rb')
    end
  end

  let(:sirsi_indexer) do
    Traject::Indexer.new.tap do |i|
      i.load_config_file('./lib/traject/config/sirsi_config.rb')
    end
  end

  let(:marc_record) do
    MARC::XMLReader.new(StringIO.new(HTTP.get("https://searchworks.stanford.edu/view/#{catkey}.marcxml").body.to_s)).to_a.first
  end

  shared_examples 'records match' do
    let(:sirsi_record) { sirsi_indexer.map_record(marc_record) }
    let(:folio_record) { folio_indexer.map_record(Traject::FolioReader::FolioRecord.fetch(catkey)) }
    let(:folio_fields) do
      path = File.expand_path('../../lib/traject/config/folio_config.rb', __dir__)
      File.read(path).scan(/to_field ["']([^"']+)["']/).map(&:first).uniq
    end
    let(:sirsi_fields) do
      path = File.expand_path('../../lib/traject/config/sirsi_config.rb', __dir__)
      File.read(path).scan(/to_field ["']([^"']+)["']/).map(&:first).uniq
    end
    let(:mapped_fields) { folio_fields & sirsi_fields }

    let(:skipped_fields) do
      [
        'marcxml', # FOLIO records have slightly different MARC records
        'all_search', # FOLIO records have slightly different MARC records
        'item_display',
        'date_cataloged' # Comes out of a 9xx field
      ]
    end
    it 'matches' do
      aggregate_failures "testing response" do
        mapped_fields.each do |key|
          next if skipped_fields.include? key
          expect(folio_record[key]).to eq(sirsi_record[key]), "expected #{key} to match \n\nSIRSI:\n#{sirsi_record[key].inspect}\nFOLIO:\n#{folio_record[key].inspect}"
        end

        sirsi_record['item_display'].each_with_index do |item_display, index|
          # require 'byebug'; byebug

          item_display_parts = item_display.split('-|-')
          folio_display_parts = folio_record['item_display'][index].split('-|-')

          # we're not mapping item types
          item_display_parts[4] = folio_display_parts[4] = ''

          expect(folio_display_parts).to eq item_display_parts
        end
      end
    end
  end

  context 'catkey provided as envvar' do
    let(:catkey) { ENV['catkey'] }

    before do
      puts "FOLIO record: "
      pp folio_record
    end
    it_behaves_like 'records match'
  end if ENV['catkey']

  context 'catkey 1004359' do
    let(:catkey) { '1004359' }
    it_behaves_like 'records match'
  end

  context 'catkey 10269181' do
    let(:catkey) { '10269181' }
    it_behaves_like 'records match'
  end

  context 'catkey 10173326' do
    let(:catkey) { '10173326' }
    it_behaves_like 'records match'
  end
end
